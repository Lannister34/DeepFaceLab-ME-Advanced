# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/Users/marsmana/Documents/MyPythonProject/UI/FaceGrid.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from UI.controls.facegrid import facegridframe,tickclass
from UI.Ui_previewUI import Ui_Dialog as previewDlgClass
import os
import cv2
import glob


class Ui_Dialog(object):
    def setupUi(self, Dialog:QtWidgets.QDialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(800, 600)
        Dialog.setMinimumSize(QtCore.QSize(800, 600))
        Dialog.setMaximumSize(QtCore.QSize(800, 600))
        Dialog.setStyleSheet("background-color:#444444")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout_7.setContentsMargins(2, 2, 2, 2)
        self.verticalLayout_7.setSpacing(2)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setSpacing(2)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.groupBox_main = QtWidgets.QGroupBox(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_main.sizePolicy().hasHeightForWidth())
        self.groupBox_main.setSizePolicy(sizePolicy)
        self.groupBox_main.setMaximumSize(QtCore.QSize(200, 16777215))
        self.groupBox_main.setStyleSheet("border:1px solid rgb(130, 130, 130);\n"
"border-top-left-radius:10px;\n"
"border-bottom-left-radius:10px;\n"
"border-top-right-radius:10px;\n"
"border-bottom-right-radius:10px;\n"
"font-size:12px;\n"
"font-weight:300;\n"
"color:rgb(255, 255, 255)")
        self.groupBox_main.setObjectName("groupBox_main")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox_main)
        self.verticalLayout.setContentsMargins(-1, 12, -1, -1)
        self.verticalLayout.setObjectName("verticalLayout")
        self.graphicsView_main = QtWidgets.QGraphicsView(self.groupBox_main)
        self.graphicsView_main.setStyleSheet("background-color:#222222")
        self.graphicsView_main.setObjectName("graphicsView_main")
        self.verticalLayout.addWidget(self.graphicsView_main)
        self.pushButton_openMain = QtWidgets.QPushButton(self.groupBox_main)
        self.pushButton_openMain.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_openMain.setAutoFillBackground(False)
        self.pushButton_openMain.setStyleSheet("QPushButton {\n"
"    font-family: \"Microsoft YaHei\";\n"
"    color: #BDC8E2;\n"
"    font-weight: bold;\n"
"\n"
"    text-align: center;\n"
"    padding-left: 0px;\n"
"    padding-top: 0px;\n"
"    border-style: solid;\n"
"    border-width: 1px;\n"
"    border-radius: 2px;\n"
"    background-color: #2E3648;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    color: red;\n"
"    border-color: green;\n"
"    background-color: aqua;\n"
"}\n"
"QPushButton:pressed{\n"
"    color: green;\n"
"    border-color: blueviolet;\n"
"    background-color: black;\n"
"}\n"
"QPushButton:disabled{\n"
"    color: blue;\n"
"    border-color: brown;\n"
"    background-color: aqua;\n"
"}")
        self.pushButton_openMain.setFlat(False)
        self.pushButton_openMain.setObjectName("pushButton_openMain")
        self.verticalLayout.addWidget(self.pushButton_openMain)
        self.verticalLayout_4.addWidget(self.groupBox_main)
        self.groupBox_Second = QtWidgets.QGroupBox(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_Second.sizePolicy().hasHeightForWidth())
        self.groupBox_Second.setSizePolicy(sizePolicy)
        self.groupBox_Second.setMaximumSize(QtCore.QSize(200, 16777215))
        self.groupBox_Second.setStyleSheet("border:1px solid rgb(130, 130, 130);\n"
"border-top-left-radius:10px;\n"
"border-bottom-left-radius:10px;\n"
"border-top-right-radius:10px;\n"
"border-bottom-right-radius:10px;\n"
"font-size:12px;\n"
"font-weight:300;\n"
"color:rgb(255, 255, 255)")
        self.groupBox_Second.setObjectName("groupBox_Second")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_Second)
        self.verticalLayout_2.setContentsMargins(-1, 12, -1, -1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.graphicsView_Second = QtWidgets.QGraphicsView(self.groupBox_Second)
        self.graphicsView_Second.setStyleSheet("background-color:#222222")
        self.graphicsView_Second.setObjectName("graphicsView_Second")
        self.verticalLayout_2.addWidget(self.graphicsView_Second)
        self.pushButton_openSecond = QtWidgets.QPushButton(self.groupBox_Second)
        self.pushButton_openSecond.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_openSecond.setStyleSheet("QPushButton {\n"
"    font-family: \"Microsoft YaHei\";\n"
"    color: #BDC8E2;\n"
"    font-weight: bold;\n"
"\n"
"    text-align: center;\n"
"    padding-left: 0px;\n"
"    padding-top: 0px;\n"
"    border-style: solid;\n"
"    border-width: 1px;\n"
"    border-radius: 2px;\n"
"    background-color: #2E3648;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    color: red;\n"
"    border-color: green;\n"
"    background-color: aqua;\n"
"}\n"
"QPushButton:pressed{\n"
"    color: green;\n"
"    border-color: blueviolet;\n"
"    background-color: black;\n"
"}\n"
"QPushButton:disabled{\n"
"    color: blue;\n"
"    border-color: brown;\n"
"    background-color: aqua;\n"
"}")
        self.pushButton_openSecond.setObjectName("pushButton_openSecond")
        self.verticalLayout_2.addWidget(self.pushButton_openSecond)
        self.verticalLayout_4.addWidget(self.groupBox_Second)
        self.horizontalLayout_6.addLayout(self.verticalLayout_4)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_title = QtWidgets.QLabel(Dialog)
        self.label_title.setStyleSheet("color:rgb(255, 255, 255)")
        self.label_title.setAlignment(QtCore.Qt.AlignCenter)
        self.label_title.setObjectName("label_title")
        self.horizontalLayout_5.addWidget(self.label_title)
        self.checkBox_rightClick = QtWidgets.QCheckBox(Dialog)
        self.checkBox_rightClick.setStyleSheet("font-family: \"Microsoft YaHei\";\n"
"    color: #BDC8E2;\n"
"    font-weight: bold;\n"
"\n"
"    text-align: center;\n"
"    padding-left: 0px;\n"
"    padding-top: 0px;\n"
"    border-style: solid;\n"
"    border-width: 1px;\n"
"    border-radius: 2px;\n"
"    background-color: #2E3648;")
        self.checkBox_rightClick.setObjectName("checkBox_rightClick")
        self.horizontalLayout_5.addWidget(self.checkBox_rightClick)
        self.horizontalLayout_5.setStretch(0, 1)
        self.verticalLayout_6.addLayout(self.horizontalLayout_5)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSpacing(2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setStyleSheet("color:rgb(255, 255, 255)")
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout.addWidget(self.label_5)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setSpacing(2)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.frame = facegridframe(Dialog)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_5.addWidget(self.frame)
        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setStyleSheet("color:rgb(255, 255, 255)")
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_5.addWidget(self.label_6)
        self.verticalLayout_5.setStretch(0, 1)
        self.horizontalLayout.addLayout(self.verticalLayout_5)
        self.horizontalLayout.setStretch(1, 1)
        self.verticalLayout_6.addLayout(self.horizontalLayout)
        self.verticalLayout_6.setStretch(1, 1)
        self.horizontalLayout_6.addLayout(self.verticalLayout_6)
        self.horizontalLayout_6.setStretch(1, 1)
        self.verticalLayout_7.addLayout(self.horizontalLayout_6)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSpacing(1)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(100, 0))
        self.label.setStyleSheet("color:rgb(255, 255, 255)")
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.progressBar_analyzeMain = QtWidgets.QProgressBar(Dialog)
        self.progressBar_analyzeMain.setStyleSheet("QProgressBar {\n"
"    /* 外边框 */\n"
"    border:1px solid rgb(130, 130, 130);  \n"
"    /* 倒角 */\n"
"    border-radius:5px; \n"
"    /* 字体对齐方式 */\n"
"    text-align:center;\n"
"color:rgb(255, 255, 255);\n"
"}\n"
" \n"
"/* 进度条 */\n"
"QProgressBar::chunk {\n"
"    /* 颜色 */\n"
"    background-color:#05B8CC;\n"
"    /* 步进距离 */\n"
"    width:5px; \n"
"    /* 进度条中间空白区域宽度 */\n"
"    margin:1px;\n"
"}")
        self.progressBar_analyzeMain.setProperty("value", 0)
        self.progressBar_analyzeMain.setObjectName("progressBar_analyzeMain")
        self.horizontalLayout_2.addWidget(self.progressBar_analyzeMain)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMinimumSize(QtCore.QSize(100, 0))
        self.label_2.setStyleSheet("color:rgb(255, 255, 255)")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.progressBar_analyzeSecond = QtWidgets.QProgressBar(Dialog)
        self.progressBar_analyzeSecond.setStyleSheet("QProgressBar {\n"
"    /* 外边框 */\n"
"    border:1px solid rgb(130, 130, 130);  \n"
"    /* 倒角 */\n"
"    border-radius:5px; \n"
"    /* 字体对齐方式 */\n"
"    text-align:center;\n"
"color:rgb(255, 255, 255);\n"
"}\n"
" \n"
"/* 进度条 */\n"
"QProgressBar::chunk {\n"
"    /* 颜色 */\n"
"    background-color:#05B8CC;\n"
"    /* 步进距离 */\n"
"    width:5px; \n"
"    /* 进度条中间空白区域宽度 */\n"
"    margin:1px;\n"
"}")
        self.progressBar_analyzeSecond.setProperty("value", 0)
        self.progressBar_analyzeSecond.setObjectName("progressBar_analyzeSecond")
        self.horizontalLayout_3.addWidget(self.progressBar_analyzeSecond)
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_3 = QtWidgets.QLabel(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setMinimumSize(QtCore.QSize(100, 0))
        self.label_3.setStyleSheet("color:rgb(255, 255, 255)")
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        self.progressBar_repak = QtWidgets.QProgressBar(Dialog)
        self.progressBar_repak.setStyleSheet("QProgressBar {\n"
"    /* 外边框 */\n"
"    border:1px solid rgb(130, 130, 130);  \n"
"    /* 倒角 */\n"
"    border-radius:5px; \n"
"    /* 字体对齐方式 */\n"
"    text-align:center;\n"
"color:rgb(255, 255, 255);\n"
"}\n"
" \n"
"/* 进度条 */\n"
"QProgressBar::chunk {\n"
"    /* 颜色 */\n"
"    background-color:#05B8CC;\n"
"    /* 步进距离 */\n"
"    width:5px; \n"
"    /* 进度条中间空白区域宽度 */\n"
"    margin:1px;\n"
"}")
        self.progressBar_repak.setProperty("value", 0)
        self.progressBar_repak.setObjectName("progressBar_repak")
        self.horizontalLayout_4.addWidget(self.progressBar_repak)
        self.verticalLayout_3.addLayout(self.horizontalLayout_4)
        self.verticalLayout_7.addLayout(self.verticalLayout_3)
        self.pushButton_createPak = QtWidgets.QPushButton(Dialog)
        self.pushButton_createPak.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_createPak.setStyleSheet("QPushButton {\n"
"    font-family: \"Microsoft YaHei\";\n"
"    color: #BDC8E2;\n"
"    font-weight: bold;\n"
"\n"
"    text-align: center;\n"
"    padding-left: 0px;\n"
"    padding-top: 0px;\n"
"    border-style: solid;\n"
"    border-width: 1px;\n"
"    border-radius: 2px;\n"
"    background-color: #2E3648;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    color: red;\n"
"    border-color: green;\n"
"    background-color: aqua;\n"
"}\n"
"QPushButton:pressed{\n"
"    color: green;\n"
"    border-color: blueviolet;\n"
"    background-color: black;\n"
"}\n"
"QPushButton:disabled{\n"
"    color: blue;\n"
"    border-color: brown;\n"
"    background-color: aqua;\n"
"}")
        self.pushButton_createPak.setObjectName("pushButton_createPak")
        self.verticalLayout_7.addWidget(self.pushButton_createPak)
        self.verticalLayout_7.setStretch(0, 1)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        #### ------------------自定义参数----------------————#
        Dialog.setWindowIcon(QtGui.QIcon(".//UI//resources//windowsIcon//IMG.ico"))
        self.mainpath=""
        self.secondpath=""
        self.facesgrid=tickclass()
        self.pushButton_createPak.setEnabled(False)
        self.checkeddict={}
        #_translate = QtCore.QCoreApplication.translate
        #Dialog.setWindowTitle(_translate("Dialog", "Aligned合并工具v1.4  by：菜刀两把/marsamana"))
        ###-------------------slot ------------------------#
        self.pushButton_openMain.clicked.connect(self.slot_openMainAlignedFolder)
        self.pushButton_openSecond.clicked.connect(self.slot_openSecondAlignedFolder)
        self.facesgrid.sig_statusstarted.connect(self.slot_facesgridThreadStarted)
        self.facesgrid.sig_AlignedLoadProcess.connect(self.slot_AlignedLoadProcess)
        self.facesgrid.sig_statusend.connect(self.slot_facesgridThreadend)
        self.facesgrid.sig_pakProcess.connect(self.slot_facegridsig_pakProcess)
        self.frame.gridunchecked.connect(self.slot_gridunchecked)
        self.frame.gridchecked.connect(self.slot_gridchecked)
        self.frame.gridrightClicked.connect(self.slot_gridrightClicked)
        self.facesgrid.sig_alignedpreview.connect(self.slot_facesgridalignedpreview)
        self.pushButton_createPak.clicked.connect(self.slot_pushButton_createPak_clicked)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Aligned合并工具v1.4  by：菜刀两把/marsamana"))
        self.groupBox_main.setTitle(_translate("Dialog", "主素材Aligned头像"))
        self.pushButton_openMain.setText(_translate("Dialog", "打开文件夹"))
        self.groupBox_Second.setTitle(_translate("Dialog", "扩充素材Aligned头像"))
        self.pushButton_openSecond.setText(_translate("Dialog", "打开文件夹"))
        self.label_title.setText(_translate("Dialog", "1.4多功能版"))
        self.checkBox_rightClick.setText(_translate("Dialog", "激活右键预览"))
        self.label_5.setText(_translate("Dialog", "↑\n"
"丨\n"
"丨\n"
"丨\n"
"仰\n"
"头\n"
"—\n"
"俯\n"
"视\n"
"丨\n"
"丨\n"
"丨\n"
"↓"))
        self.label_6.setText(_translate("Dialog", "←----------脸右转|脸左转----------→"))
        self.label.setText(_translate("Dialog", "主素材分析"))
        self.label_2.setText(_translate("Dialog", "扩充素材分析"))
        self.label_3.setText(_translate("Dialog", "生成pak"))
        self.pushButton_createPak.setText(_translate("Dialog", "生成pak"))


    def slot_openMainAlignedFolder(self):
        if "WORKSPACE" in os.environ:
                dirpath=os.environ['WORKSPACE']
        else:
                dirpath=os.path.realpath("..//..//")
        maindir=QtWidgets.QFileDialog.getExistingDirectory(self.pushButton_openMain,"选取文件夹",dirpath)
        if maindir is None or maindir=="":
                return
        if maindir==self.mainpath:
                return
        if maindir==self.secondpath:
                QtWidgets.QMessageBox().critical(self.pushButton_openMain,"错误","选择的路径同扩展素材选择的路径相同！")
                return
        self.mainpath=maindir
        self.facesgrid.startload(maindir,b_src=True)



    def slot_openSecondAlignedFolder(self):
        if "WORKSPACE" in os.environ:
                dirpath=os.environ['WORKSPACE']
        else:
                dirpath=os.path.realpath("..//..//")
        seconddir=QtWidgets.QFileDialog.getExistingDirectory(self.pushButton_openSecond,"选取文件夹",dirpath)
        if seconddir is None or seconddir=="":
                return
        if seconddir==self.secondpath:
                return
        if seconddir==self.mainpath:
                QtWidgets.QMessageBox().critical(self.pushButton_openSecond,"错误","选择的路径同主素材选择的路径相同！")
                return
        self.secondpath=seconddir
        self.checkeddict.clear()

        self.facesgrid.startload(seconddir,b_src=False)

    def slot_facesgridThreadStarted(self):
        self.pushButton_openMain.setEnabled(False)
        self.pushButton_openSecond.setEnabled(False)
        self.pushButton_createPak.setEnabled(False)

    def slot_AlignedLoadProcess(self,b_src:bool,count:int,value:int):
        if b_src:
                if self.progressBar_analyzeMain.maximum()!=count:
                        self.progressBar_analyzeMain.setMaximum(count)
                self.progressBar_analyzeMain.setValue(value)
        else:
                if self.progressBar_analyzeSecond.maximum()!=count:
                        self.progressBar_analyzeSecond.setMaximum(count)
                self.progressBar_analyzeSecond.setValue(value)

    def slot_facesgridThreadend(self,b_pak:bool):
        self.frame.loadfacesinfo(self.facesgrid)
        self.pushButton_openMain.setEnabled(True)
        self.pushButton_openSecond.setEnabled(True)
        if self.mainpath!="" or bool(self.checkeddict):
                self.pushButton_createPak.setEnabled(True)
        else:
                self.pushButton_createPak.setEnabled(False)
        if b_pak:
                QtWidgets.QMessageBox().about(self.pushButton_createPak,"完成","已经pak完成！")

    def slot_facegridsig_pakProcess(self,count,value):
        if self.progressBar_repak.maximum()!=count:
                        self.progressBar_repak.setMaximum(count)
        self.progressBar_repak.setValue(value)

    def slot_gridchecked(self,x,y):
        keyname=str(x)+'_'+str(y)
        self.checkeddict[keyname]=self.facesgrid.getDSTfilelist(x,y)
        #print(self.checkeddict[keyname])
        if bool(self.checkeddict):
                self.pushButton_createPak.setEnabled(True)

    def slot_gridunchecked(self,x,y):
        keyname=str(x)+'_'+str(y)
        self.checkeddict.pop(keyname)
        if not bool(self.checkeddict):
                self.pushButton_createPak.setEnabled(False)
        
    def slot_gridrightClicked(self,x,y):
        if not self.checkBox_rightClick.isChecked():
                return
        keyname=str(x)+'_'+str(y)
        item=self.facesgrid.getFullInfo(x,y)
        [pitchtick,minpitch,maxpitch,yawtick,minyaw,maxyaw,srcfilepathlist,srccout,dstfilepathlist,dstcout]=item
        if len(srcfilepathlist)==0 and len(dstfilepathlist)==0:
                return
        previewdlg=previewDlgClass()
        MainWindow = QtWidgets.QDialog()
        previewdlg.setupUi(MainWindow)
        previewdlg.loadList(item)
        MainWindow.exec()
        self.frame.loadfacesinfo(self.facesgrid)    

    def slot_facesgridalignedpreview(self,b_src:bool,pix:QtGui.QPixmap):
        item=QtWidgets.QGraphicsPixmapItem(pix)
        scene=QtWidgets.QGraphicsScene()
        scene.addItem(item)
        if b_src:
                self.graphicsView_main.setScene(scene)
                self.graphicsView_main.fitInView(item,QtCore.Qt.KeepAspectRatio)
        else:
                self.graphicsView_Second.setScene(scene)
                self.graphicsView_Second.fitInView(item,QtCore.Qt.KeepAspectRatio)
        pass

    def slot_pushButton_createPak_clicked(self):
        if "WORKSPACE" in os.environ:
                dirpath=os.environ['WORKSPACE']
        else:
                dirpath=os.path.realpath("..//..//")
        pakfolder=QtWidgets.QFileDialog.getExistingDirectory(self.pushButton_createPak,"选取文件夹",dirpath)
        if pakfolder is None or pakfolder=="":
                return

        packed_faceset_filename=self.facesgrid.packed_faceset_filename
        pakpath=os.path.join(pakfolder,packed_faceset_filename)
        if os.path.exists(pakpath) and os.path.isfile(pakpath):
                res=QtWidgets.QMessageBox().question(self.pushButton_createPak,"存在pak文件","当前路径已存在"+packed_faceset_filename+"文件。选择<是>将删除此文件并继续，选择<否>则返回！",QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.No,QtWidgets.QMessageBox.No)
                if res==QtWidgets.QMessageBox.No:
                        return
                else:
                        try:
                                os.unlink(pakpath)
                        except:
                                QtWidgets.QMessageBox().critical(self.pushButton_createPak,"错误","文件无法删除！")
                                return
        self.facesgrid.startpak(pakpath,self.mainpath,self.checkeddict)



