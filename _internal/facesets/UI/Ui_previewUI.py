# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\DeepFaceLab\_internal\facesets\UI\previewUI_test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import cv2
from PyQt5.QtGui import QImage,QPixmap,QIcon
import numpy
from pathlib import Path
import os
import shutil

class Ui_Dialog(object):
        def setupUi(self, Dialog):
                Dialog.setObjectName("Dialog")
                Dialog.setWindowModality(QtCore.Qt.NonModal)
                Dialog.resize(800, 600)
                Dialog.setStyleSheet("background-color:#444444")
                self.verticalLayout_3 = QtWidgets.QVBoxLayout(Dialog)
                self.verticalLayout_3.setContentsMargins(2, 2, 2, 2)
                self.verticalLayout_3.setObjectName("verticalLayout_3")
                self.horizontalLayout = QtWidgets.QHBoxLayout()
                self.horizontalLayout.setContentsMargins(-1, 2, -1, -1)
                self.horizontalLayout.setObjectName("horizontalLayout")
                self.label_3 = QtWidgets.QLabel(Dialog)
                self.label_3.setText("")
                self.label_3.setObjectName("label_3")
                self.horizontalLayout.addWidget(self.label_3)
                self.label_pitch = QtWidgets.QLabel(Dialog)
                self.label_pitch.setStyleSheet("color:rgb(255, 255, 255)")
                self.label_pitch.setObjectName("label_pitch")
                self.horizontalLayout.addWidget(self.label_pitch)
                self.label_pitch_valueL = QtWidgets.QLabel(Dialog)
                self.label_pitch_valueL.setStyleSheet("color:rgb(255, 255, 255)")
                self.label_pitch_valueL.setObjectName("label_pitch_valueL")
                self.horizontalLayout.addWidget(self.label_pitch_valueL)
                self.label_5 = QtWidgets.QLabel(Dialog)
                self.label_5.setText("")
                self.label_5.setObjectName("label_5")
                self.horizontalLayout.addWidget(self.label_5)
                self.label_yaw = QtWidgets.QLabel(Dialog)
                self.label_yaw.setStyleSheet("color:rgb(255, 255, 255)")
                self.label_yaw.setObjectName("label_yaw")
                self.horizontalLayout.addWidget(self.label_yaw)
                self.label_yaw_valueL = QtWidgets.QLabel(Dialog)
                self.label_yaw_valueL.setStyleSheet("color:rgb(255, 255, 255)")
                self.label_yaw_valueL.setObjectName("label_yaw_valueL")
                self.horizontalLayout.addWidget(self.label_yaw_valueL)
                self.label_4 = QtWidgets.QLabel(Dialog)
                self.label_4.setText("")
                self.label_4.setObjectName("label_4")
                self.horizontalLayout.addWidget(self.label_4)
                self.horizontalLayout.setStretch(0, 1)
                self.horizontalLayout.setStretch(3, 1)
                self.horizontalLayout.setStretch(6, 1)
                self.verticalLayout_3.addLayout(self.horizontalLayout)
                self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
                self.horizontalLayout_2.setObjectName("horizontalLayout_2")
                self.label = QtWidgets.QLabel(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
                self.label.setSizePolicy(sizePolicy)
                self.label.setMinimumSize(QtCore.QSize(56, 0))
                self.label.setMaximumSize(QtCore.QSize(56, 16777215))
                self.label.setStyleSheet("color:rgb(255, 255, 255)")
                self.label.setAlignment(QtCore.Qt.AlignCenter)
                self.label.setObjectName("label")
                self.horizontalLayout_2.addWidget(self.label)
                self.listWidget_main = QtWidgets.QListWidget(Dialog)
                self.listWidget_main.setStyleSheet("background-color:rgb(100, 100, 100)")
                self.listWidget_main.setObjectName("listWidget_main")
                self.horizontalLayout_2.addWidget(self.listWidget_main)
                self.verticalLayout = QtWidgets.QVBoxLayout()
                self.verticalLayout.setObjectName("verticalLayout")
                self.label_8 = QtWidgets.QLabel(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
                self.label_8.setSizePolicy(sizePolicy)
                self.label_8.setMinimumSize(QtCore.QSize(70, 0))
                self.label_8.setMaximumSize(QtCore.QSize(70, 16777215))
                self.label_8.setText("")
                self.label_8.setObjectName("label_8")
                self.verticalLayout.addWidget(self.label_8)
                self.pushButton_main_delsel = QtWidgets.QPushButton(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.pushButton_main_delsel.sizePolicy().hasHeightForWidth())
                self.pushButton_main_delsel.setSizePolicy(sizePolicy)
                self.pushButton_main_delsel.setMinimumSize(QtCore.QSize(70, 40))
                self.pushButton_main_delsel.setMaximumSize(QtCore.QSize(70, 40))
                self.pushButton_main_delsel.setStyleSheet("QPushButton {\n"
        "    font-family: \"Microsoft YaHei\";\n"
        "    color: #BDC8E2;\n"
        "    font-weight: bold;\n"
        "\n"
        "    text-align: center;\n"
        "    padding-left: 0px;\n"
        "    padding-top: 0px;\n"
        "    border-style: solid;\n"
        "    border-width: 1px;\n"
        "    border-radius: 2px;\n"
        "    background-color: #2E3648;\n"
        "}\n"
        "\n"
        "QPushButton:hover{\n"
        "    color: red;\n"
        "    border-color: green;\n"
        "    background-color: aqua;\n"
        "}\n"
        "QPushButton:pressed{\n"
        "    color: green;\n"
        "    border-color: blueviolet;\n"
        "    background-color: black;\n"
        "}\n"
        "QPushButton:disabled{\n"
        "    color: blue;\n"
        "    border-color: brown;\n"
        "    background-color: aqua;\n"
        "}")
                self.pushButton_main_delsel.setObjectName("pushButton_main_delsel")
                self.verticalLayout.addWidget(self.pushButton_main_delsel)
                self.line = QtWidgets.QFrame(Dialog)
                self.line.setStyleSheet("border:1px solid rgb(130, 130, 130);")
                self.line.setFrameShape(QtWidgets.QFrame.HLine)
                self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line.setObjectName("line")
                self.verticalLayout.addWidget(self.line)
                self.pushButton_main_copyall = QtWidgets.QPushButton(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.pushButton_main_copyall.sizePolicy().hasHeightForWidth())
                self.pushButton_main_copyall.setSizePolicy(sizePolicy)
                self.pushButton_main_copyall.setMinimumSize(QtCore.QSize(70, 40))
                self.pushButton_main_copyall.setMaximumSize(QtCore.QSize(70, 40))
                self.pushButton_main_copyall.setStyleSheet("QPushButton {\n"
        "    font-family: \"Microsoft YaHei\";\n"
        "    color: #BDC8E2;\n"
        "    font-weight: bold;\n"
        "\n"
        "    text-align: center;\n"
        "    padding-left: 0px;\n"
        "    padding-top: 0px;\n"
        "    border-style: solid;\n"
        "    border-width: 1px;\n"
        "    border-radius: 2px;\n"
        "    background-color: #2E3648;\n"
        "}\n"
        "\n"
        "QPushButton:hover{\n"
        "    color: red;\n"
        "    border-color: green;\n"
        "    background-color: aqua;\n"
        "}\n"
        "QPushButton:pressed{\n"
        "    color: green;\n"
        "    border-color: blueviolet;\n"
        "    background-color: black;\n"
        "}\n"
        "QPushButton:disabled{\n"
        "    color: blue;\n"
        "    border-color: brown;\n"
        "    background-color: aqua;\n"
        "}")
                self.pushButton_main_copyall.setObjectName("pushButton_main_copyall")
                self.verticalLayout.addWidget(self.pushButton_main_copyall)
                self.pushButton_main_copysel = QtWidgets.QPushButton(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.pushButton_main_copysel.sizePolicy().hasHeightForWidth())
                self.pushButton_main_copysel.setSizePolicy(sizePolicy)
                self.pushButton_main_copysel.setMinimumSize(QtCore.QSize(70, 40))
                self.pushButton_main_copysel.setMaximumSize(QtCore.QSize(70, 40))
                self.pushButton_main_copysel.setStyleSheet("QPushButton {\n"
        "    font-family: \"Microsoft YaHei\";\n"
        "    color: #BDC8E2;\n"
        "    font-weight: bold;\n"
        "\n"
        "    text-align: center;\n"
        "    padding-left: 0px;\n"
        "    padding-top: 0px;\n"
        "    border-style: solid;\n"
        "    border-width: 1px;\n"
        "    border-radius: 2px;\n"
        "    background-color: #2E3648;\n"
        "}\n"
        "\n"
        "QPushButton:hover{\n"
        "    color: red;\n"
        "    border-color: green;\n"
        "    background-color: aqua;\n"
        "}\n"
        "QPushButton:pressed{\n"
        "    color: green;\n"
        "    border-color: blueviolet;\n"
        "    background-color: black;\n"
        "}\n"
        "QPushButton:disabled{\n"
        "    color: blue;\n"
        "    border-color: brown;\n"
        "    background-color: aqua;\n"
        "}")
                self.pushButton_main_copysel.setObjectName("pushButton_main_copysel")
                self.verticalLayout.addWidget(self.pushButton_main_copysel)
                self.label_6 = QtWidgets.QLabel(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
                self.label_6.setSizePolicy(sizePolicy)
                self.label_6.setMinimumSize(QtCore.QSize(70, 0))
                self.label_6.setMaximumSize(QtCore.QSize(70, 16777215))
                self.label_6.setText("")
                self.label_6.setObjectName("label_6")
                self.verticalLayout.addWidget(self.label_6)
                self.verticalLayout.setStretch(0, 1)
                self.verticalLayout.setStretch(5, 1)
                self.horizontalLayout_2.addLayout(self.verticalLayout)
                self.horizontalLayout_2.setStretch(1, 1)
                self.verticalLayout_3.addLayout(self.horizontalLayout_2)
                self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
                self.horizontalLayout_3.setObjectName("horizontalLayout_3")
                self.label_2 = QtWidgets.QLabel(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
                self.label_2.setSizePolicy(sizePolicy)
                self.label_2.setMinimumSize(QtCore.QSize(56, 0))
                self.label_2.setMaximumSize(QtCore.QSize(56, 16777215))
                self.label_2.setStyleSheet("color:rgb(255, 255, 255)")
                self.label_2.setAlignment(QtCore.Qt.AlignCenter)
                self.label_2.setObjectName("label_2")
                self.horizontalLayout_3.addWidget(self.label_2)
                self.listWidget_second = QtWidgets.QListWidget(Dialog)
                self.listWidget_second.setStyleSheet("background-color:rgb(100, 100, 100)")
                self.listWidget_second.setObjectName("listWidget_second")
                self.horizontalLayout_3.addWidget(self.listWidget_second)
                self.verticalLayout_2 = QtWidgets.QVBoxLayout()
                self.verticalLayout_2.setObjectName("verticalLayout_2")
                self.label_9 = QtWidgets.QLabel(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
                self.label_9.setSizePolicy(sizePolicy)
                self.label_9.setMinimumSize(QtCore.QSize(70, 0))
                self.label_9.setMaximumSize(QtCore.QSize(70, 16777215))
                self.label_9.setText("")
                self.label_9.setObjectName("label_9")
                self.verticalLayout_2.addWidget(self.label_9)
                self.pushButton_sec_delsel = QtWidgets.QPushButton(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.pushButton_sec_delsel.sizePolicy().hasHeightForWidth())
                self.pushButton_sec_delsel.setSizePolicy(sizePolicy)
                self.pushButton_sec_delsel.setMinimumSize(QtCore.QSize(70, 40))
                self.pushButton_sec_delsel.setMaximumSize(QtCore.QSize(70, 40))
                self.pushButton_sec_delsel.setStyleSheet("QPushButton {\n"
        "    font-family: \"Microsoft YaHei\";\n"
        "    color: #BDC8E2;\n"
        "    font-weight: bold;\n"
        "\n"
        "    text-align: center;\n"
        "    padding-left: 0px;\n"
        "    padding-top: 0px;\n"
        "    border-style: solid;\n"
        "    border-width: 1px;\n"
        "    border-radius: 2px;\n"
        "    background-color: #2E3648;\n"
        "}\n"
        "\n"
        "QPushButton:hover{\n"
        "    color: red;\n"
        "    border-color: green;\n"
        "    background-color: aqua;\n"
        "}\n"
        "QPushButton:pressed{\n"
        "    color: green;\n"
        "    border-color: blueviolet;\n"
        "    background-color: black;\n"
        "}\n"
        "QPushButton:disabled{\n"
        "    color: blue;\n"
        "    border-color: brown;\n"
        "    background-color: aqua;\n"
        "}")
                self.pushButton_sec_delsel.setObjectName("pushButton_sec_delsel")
                self.verticalLayout_2.addWidget(self.pushButton_sec_delsel)
                self.line_2 = QtWidgets.QFrame(Dialog)
                self.line_2.setStyleSheet("border:1px solid rgb(130, 130, 130);")
                self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
                self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line_2.setObjectName("line_2")
                self.verticalLayout_2.addWidget(self.line_2)
                self.pushButton_sec_copyall = QtWidgets.QPushButton(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.pushButton_sec_copyall.sizePolicy().hasHeightForWidth())
                self.pushButton_sec_copyall.setSizePolicy(sizePolicy)
                self.pushButton_sec_copyall.setMinimumSize(QtCore.QSize(70, 40))
                self.pushButton_sec_copyall.setMaximumSize(QtCore.QSize(70, 40))
                self.pushButton_sec_copyall.setStyleSheet("QPushButton {\n"
        "    font-family: \"Microsoft YaHei\";\n"
        "    color: #BDC8E2;\n"
        "    font-weight: bold;\n"
        "\n"
        "    text-align: center;\n"
        "    padding-left: 0px;\n"
        "    padding-top: 0px;\n"
        "    border-style: solid;\n"
        "    border-width: 1px;\n"
        "    border-radius: 2px;\n"
        "    background-color: #2E3648;\n"
        "}\n"
        "\n"
        "QPushButton:hover{\n"
        "    color: red;\n"
        "    border-color: green;\n"
        "    background-color: aqua;\n"
        "}\n"
        "QPushButton:pressed{\n"
        "    color: green;\n"
        "    border-color: blueviolet;\n"
        "    background-color: black;\n"
        "}\n"
        "QPushButton:disabled{\n"
        "    color: blue;\n"
        "    border-color: brown;\n"
        "    background-color: aqua;\n"
        "}")
                self.pushButton_sec_copyall.setObjectName("pushButton_sec_copyall")
                self.verticalLayout_2.addWidget(self.pushButton_sec_copyall)
                self.pushButton_sec_copysel = QtWidgets.QPushButton(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.pushButton_sec_copysel.sizePolicy().hasHeightForWidth())
                self.pushButton_sec_copysel.setSizePolicy(sizePolicy)
                self.pushButton_sec_copysel.setMinimumSize(QtCore.QSize(70, 40))
                self.pushButton_sec_copysel.setMaximumSize(QtCore.QSize(70, 40))
                self.pushButton_sec_copysel.setStyleSheet("QPushButton {\n"
        "    font-family: \"Microsoft YaHei\";\n"
        "    color: #BDC8E2;\n"
        "    font-weight: bold;\n"
        "\n"
        "    text-align: center;\n"
        "    padding-left: 0px;\n"
        "    padding-top: 0px;\n"
        "    border-style: solid;\n"
        "    border-width: 1px;\n"
        "    border-radius: 2px;\n"
        "    background-color: #2E3648;\n"
        "}\n"
        "\n"
        "QPushButton:hover{\n"
        "    color: red;\n"
        "    border-color: green;\n"
        "    background-color: aqua;\n"
        "}\n"
        "QPushButton:pressed{\n"
        "    color: green;\n"
        "    border-color: blueviolet;\n"
        "    background-color: black;\n"
        "}\n"
        "QPushButton:disabled{\n"
        "    color: blue;\n"
        "    border-color: brown;\n"
        "    background-color: aqua;\n"
        "}")
                self.pushButton_sec_copysel.setObjectName("pushButton_sec_copysel")
                self.verticalLayout_2.addWidget(self.pushButton_sec_copysel)
                self.label_7 = QtWidgets.QLabel(Dialog)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
                self.label_7.setSizePolicy(sizePolicy)
                self.label_7.setMinimumSize(QtCore.QSize(70, 0))
                self.label_7.setMaximumSize(QtCore.QSize(70, 16777215))
                self.label_7.setText("")
                self.label_7.setObjectName("label_7")
                self.verticalLayout_2.addWidget(self.label_7)
                self.verticalLayout_2.setStretch(0, 1)
                self.verticalLayout_2.setStretch(5, 1)
                self.horizontalLayout_3.addLayout(self.verticalLayout_2)
                self.horizontalLayout_3.setStretch(1, 1)
                self.verticalLayout_3.addLayout(self.horizontalLayout_3)
                self.verticalLayout_3.setStretch(1, 1)
                self.verticalLayout_3.setStretch(2, 1)

                self.retranslateUi(Dialog)
                QtCore.QMetaObject.connectSlotsByName(Dialog)

                ###-------------------------------------------------
                self.listWidget_main.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
                self.listWidget_main.setViewMode(QtWidgets.QListView.IconMode)
                self.listWidget_main.setIconSize(QtCore.QSize(100,100))
                self.listWidget_main.setSpacing(10)
                self.listWidget_main.setResizeMode(QtWidgets.QListView.Adjust)

                self.listWidget_second.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
                self.listWidget_second.setViewMode(QtWidgets.QListView.IconMode)
                self.listWidget_second.setIconSize(QtCore.QSize(100,100))
                self.listWidget_second.setSpacing(10)
                self.listWidget_second.setResizeMode(QtWidgets.QListView.Adjust)

                self.pushButton_main_delsel.clicked.connect(self.slot_main_delsel)
                self.pushButton_main_copyall.clicked.connect(self.slot_main_copyAll)
                self.pushButton_main_copysel.clicked.connect(self.slot_main_copySel)
                self.pushButton_main_delsel.setDisabled(True)
                self.pushButton_main_copysel.setDisabled(True)
                self.listWidget_main.itemSelectionChanged.connect(self.slot_main_selectionChanged)

                self.pushButton_sec_delsel.clicked.connect(self.slot_sec_delsel)
                self.pushButton_sec_copyall.clicked.connect(self.slot_sec_copyAll)
                self.pushButton_sec_copysel.clicked.connect(self.slot_sec_copySel)
                self.pushButton_sec_delsel.setDisabled(True)
                self.pushButton_sec_copysel.setDisabled(True)
                self.listWidget_second.itemSelectionChanged.connect(self.slot_sec_selectionChanged)
                Dialog.setWindowIcon(QtGui.QIcon(".//UI//resources//windowsIcon//IMG.ico"))
                Dialog.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint | QtCore.Qt.WindowMaximizeButtonHint | QtCore.Qt.WindowCloseButtonHint) #


                

        def retranslateUi(self, Dialog):
                _translate = QtCore.QCoreApplication.translate
                Dialog.setWindowTitle(_translate("Dialog", "预览"))
                self.label_pitch.setText(_translate("Dialog", "俯仰角："))
                self.label_pitch_valueL.setText(_translate("Dialog", "TextLabel"))
                self.label_yaw.setText(_translate("Dialog", "左右角："))
                self.label_yaw_valueL.setText(_translate("Dialog", "TextLabel"))
                self.label.setText(_translate("Dialog", "主素材"))
                self.pushButton_main_delsel.setText(_translate("Dialog", "删除选中"))
                self.pushButton_main_copyall.setText(_translate("Dialog", "复制全部"))
                self.pushButton_main_copysel.setText(_translate("Dialog", "复制选中"))
                self.label_2.setText(_translate("Dialog", "扩充素材"))
                self.pushButton_sec_delsel.setText(_translate("Dialog", "删除选中"))
                self.pushButton_sec_copyall.setText(_translate("Dialog", "复制全部"))
                self.pushButton_sec_copysel.setText(_translate("Dialog", "复制选中"))

        def loadList(self,obj):
                [pitchtick,minpitch,maxpitch,yawtick,minyaw,maxyaw,self.srcfilepathlist,srccout,self.dstfilepathlist,dstcout]=obj
                if pitchtick<0:
                        ptx="低头"+str(round((0-pitchtick), 2))+'度'
                elif pitchtick>0:
                        ptx="抬头"+str(round(pitchtick,2))+'度'
                else:
                        ptx="平视0度"
                self.label_pitch_valueL.setText(ptx)

                if yawtick<0:
                        ytx="脸部右转"+str(round((0-yawtick), 2))+'度'
                elif yawtick>0:
                        ytx="脸部左转"+str(round(yawtick,2))+'度'
                else:
                        ytx="正向0度"
                self.label_yaw_valueL.setText(ytx)

                for imgpath in self.srcfilepathlist:
                        img=cv2.imdecode(numpy.fromfile(imgpath,dtype=numpy.uint8),-1)
                        itemname=Path(imgpath).stem
                        self.add_item_to_Qlistwiget_safety(self.listWidget_main,itemname,img,tootip=str(imgpath))

                for imgpath1 in self.dstfilepathlist:
                        img=cv2.imdecode(numpy.fromfile(imgpath1,dtype=numpy.uint8),-1)
                        itemname=Path(imgpath1).stem
                        self.add_item_to_Qlistwiget_safety(self.listWidget_second,itemname,img,tootip=str(imgpath1))
                
                if self.srcfilepathlist is None or len(self.srcfilepathlist)==0:
                        self.pushButton_main_delsel.setDisabled(True)
                        self.pushButton_main_copyall.setDisabled(True)
                        self.pushButton_main_copysel.setDisabled(True)
                
                if self.dstfilepathlist is None or len(self.dstfilepathlist)==0:
                        self.pushButton_sec_delsel.setDisabled(True)
                        self.pushButton_sec_copyall.setDisabled(True)
                        self.pushButton_sec_copysel.setDisabled(True)


        def slot_main_delsel(self):
                for item in self.listWidget_main.selectedItems():
                        for file in self.srcfilepathlist:
                                if str(file)==item.toolTip():
                                        try:
                                                os.unlink(file)
                                        except Exception as ex:
                                                print(ex.__str__())
                                                QtWidgets.QMessageBox.warning(self.listWidget_main, '无法删除', "删除<"+item.toolTip()+">时发生错误！\n")
                                        else:
                                                print("删除："+str(file))
                                                self.srcfilepathlist.remove(file)
                                                self.listWidget_main.takeItem(self.listWidget_main.row(item) )
                                        finally:
                                                break
                if len(self.srcfilepathlist)==0:
                        self.pushButton_main_delsel.setDisabled(True)
                        self.pushButton_main_copyall.setDisabled(True)
                        self.pushButton_main_copysel.setDisabled(True)

        def slot_main_copyAll(self):
                if "WORKSPACE" in os.environ:
                        temppath=os.environ['WORKSPACE']
                else:
                        temppath=os.path.realpath("..//..//")
                dirpath=QtWidgets.QFileDialog.getExistingDirectory(self.listWidget_main,"选取复制到的文件夹",temppath)
                if dirpath=="":
                        return
                if dirpath==os.path.dirname(self.listWidget_main.item(0).toolTip()):
                        QtWidgets.QMessageBox.warning(self.listWidget_main, '错误', "复制到的文件夹与当前文件夹相同！")
                        return
                OK=0
                error=0
                for index in range(0,self.listWidget_main.count()):
                        try:
                                shutil.copy(self.listWidget_main.item(index).toolTip(),dirpath)
                                print("复制..."+self.listWidget_main.item(index).toolTip())
                                OK+=1
                        except Exception as ex:
                                print(ex.__str__())
                                error+=1
                if error==0:
                        info="完成全部"+str(OK)+"个文件的复制!"
                else:
                        info="共完成"+str(OK)+"个文件的复制、"+str(error)+"个文件失败!"
                QtWidgets.QMessageBox.information(self.listWidget_main, '完成', info)

        def slot_main_copySel(self):
                if "WORKSPACE" in os.environ:
                        temppath=os.environ['WORKSPACE']
                else:
                        temppath=os.path.realpath("..//..//")
                dirpath=QtWidgets.QFileDialog.getExistingDirectory(self.listWidget_main,"选取复制到的文件夹",temppath)
                if dirpath=="":
                        return
                if dirpath==os.path.dirname(self.listWidget_main.item(0).toolTip()):
                        QtWidgets.QMessageBox.warning(self.listWidget_main, '错误', "复制到的文件夹与当前文件夹相同！")
                        return
                OK=0
                error=0
                for item in self.listWidget_main.selectedItems():
                        try:
                                shutil.copy(item.toolTip(),dirpath)
                                print("复制..."+item.toolTip())
                                OK+=1
                        except Exception as ex:
                                print(ex.__str__())
                                error+=1
                if error==0:
                        info="完成全部"+str(OK)+"个文件的复制!"
                else:
                        info="共完成"+str(OK)+"个文件的复制、"+str(error)+"个文件失败!"
                QtWidgets.QMessageBox.information(self.listWidget_main, '完成', info)

        def slot_main_selectionChanged(self):
                if len(self.listWidget_main.selectedItems())<=0:
                        self.pushButton_main_delsel.setDisabled(True)
                        self.pushButton_main_copysel.setDisabled(True)
                else:
                        self.pushButton_main_delsel.setEnabled(True)
                        self.pushButton_main_copysel.setEnabled(True)

        def slot_sec_delsel(self):
                for item in self.listWidget_second.selectedItems():
                        for file in self.dstfilepathlist:
                                
                                if str(file)==item.toolTip():
                                        try:
                                                os.unlink(file)
                                        except Exception as ex:
                                                print(ex.__str__())
                                                QtWidgets.QMessageBox.warning(self.listWidget_second, '无法删除', "删除<"+item.toolTip()+">时发生错误！\n")
                                        else:
                                                print("删除："+str(file))
                                                self.dstfilepathlist.remove(file)
                                                self.listWidget_second.takeItem(self.listWidget_second.row(item) )
                                        finally:
                                                break
                if len(self.dstfilepathlist)==0:
                        self.pushButton_sec_delsel.setDisabled(True)
                        self.pushButton_sec_copyall.setDisabled(True)
                        self.pushButton_sec_copysel.setDisabled(True)

        def slot_sec_copyAll(self):
                if "WORKSPACE" in os.environ:
                        temppath=os.environ['WORKSPACE']
                else:
                        temppath=os.path.realpath("..//..//")
                dirpath=QtWidgets.QFileDialog.getExistingDirectory(self.listWidget_second,"选取复制到的文件夹",temppath)
                if dirpath=="":
                        return
                if dirpath==os.path.dirname(self.listWidget_second.item(0).toolTip()):
                        QtWidgets.QMessageBox.warning(self.listWidget_second, '错误', "复制到的文件夹与当前文件夹相同！")
                        return
                OK=0
                error=0
                for index in range(0,self.listWidget_second.count()):
                        try:
                                shutil.copy(self.listWidget_second.item(index).toolTip(),dirpath)
                                print("复制..."+self.listWidget_second.item(index).toolTip())
                                OK+=1
                        except Exception as ex:
                                print(ex.__str__())
                                error+=1
                if error==0:
                        info="完成全部"+str(OK)+"个文件的复制!"
                else:
                        info="共完成"+str(OK)+"个文件的复制、"+str(error)+"个文件失败!"
                QtWidgets.QMessageBox.information(self.listWidget_second, '完成', info)

        def slot_sec_copySel(self):
                if "WORKSPACE" in os.environ:
                        temppath=os.environ['WORKSPACE']
                else:
                        temppath=os.path.realpath("..//..//")
                dirpath=QtWidgets.QFileDialog.getExistingDirectory(self.listWidget_second,"选取复制到的文件夹",temppath)
                if dirpath=="":
                        return
                if dirpath==os.path.dirname(self.listWidget_second.item(0).toolTip()):
                        QtWidgets.QMessageBox.warning(self.listWidget_second, '错误', "复制到的文件夹与当前文件夹相同！")
                        return
                OK=0
                error=0
                for item in self.listWidget_second.selectedItems():
                        try:
                                shutil.copy(item.toolTip(),dirpath)
                                print("复制..."+item.toolTip())
                                OK+=1
                        except Exception as ex:
                                print(ex.__str__())
                                error+=1
                if error==0:
                        info="完成全部"+str(OK)+"个文件的复制!"
                else:
                        info="共完成"+str(OK)+"个文件的复制、"+str(error)+"个文件失败!"
                QtWidgets.QMessageBox.information(self.listWidget_second, '完成', info)

        def slot_sec_selectionChanged(self):
                if len(self.listWidget_second.selectedItems())<=0:
                        self.pushButton_sec_delsel.setDisabled(True)
                        self.pushButton_sec_copysel.setDisabled(True)
                else:
                        self.pushButton_sec_delsel.setEnabled(True)
                        self.pushButton_sec_copysel.setEnabled(True)

        def add_item_to_Qlistwiget_safety(self,listwiget,itemname,itemimg,tootip:str=None,b_editeable:bool=False,b_BGR=True):
                """安全添加item
                \n      参数: itemname,itemimg
                """
                item1=QtWidgets.QListWidgetItem(listwiget)
                if isinstance(itemimg,QtGui.QIcon):
                        item1.setIcon(itemimg)
                else:
                        try:
                                img_rgb=cv2.cvtColor(itemimg,cv2.COLOR_BGR2RGB)
                        except Exception as ex:
                                print(ex.__str__())
                                img_rgb=None
                        item1.setIcon(convert_img_to_Qicon(get_safethumbtail(img_rgb)))
                item1.setText(itemname)
                if not (tootip is None):
                        item1.setToolTip(tootip)
                item1.setTextAlignment(QtCore.Qt.AlignHCenter)
                if b_editeable:
                        item1.setFlags(item1.flags() | QtCore.Qt.ItemIsEditable)
                listwiget.addItem(item1)
                #QtWidgets.QApplication.processEvents()
                listwiget.update()


def convert_img_to_Qicon(img):
        x = img.shape[1]                                        #获取图像大小
        y = img.shape[0]
        #zoomscale=1                                        #图片放缩尺度
        frame = QImage(img, x, y, QImage.Format_RGB888)
        pix = QPixmap.fromImage(frame)
        ico=QIcon(pix)
        return ico


def get_safethumbtail(thumbtail):
        if thumbtail is None:
                # 使用Numpy创建一张(1024×1024)纸
                img = numpy.zeros((1024,1024,3), numpy.uint8)
                # 使用白色填充图片区域,默认为黑色
                img.fill(255)
                return img
        else:
                return thumbtail
